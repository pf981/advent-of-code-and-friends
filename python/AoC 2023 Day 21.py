# Databricks notebook source
# %pip install z3-solver

# COMMAND ----------

inp = '''...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........
'''

# COMMAND ----------

inp = '''...................................................................................................................................
.....###.........#..#.........#.............#........##....#................##.......#..#.#.....#......#..#..#..##........#........
.#.............#............#...#.#...#.............#....#.................#.......#................#.....#....#.................#.
..#.......#..........#..........#......#.........#........................#.#...##.........#.......#.....#.##..#.............#.....
....#...#..##......#................##......#..#..#........................##.......#.............#..............##................
........#....#........#..#......#....#......#........#.........................#.....#.#.........#.................#..#..##....#...
.......................#...#.....#.....#..........#..#.........#............##.#...........#.....#..#.##..........#......#.#.....#.
..........#..........#....#.##.#...................#..#...........#...............#...........................#.....#.......##.....
.#.##..........#....#.#...#.....#.............#...............#.....................#.......#.#......#..................#..#.......
......#.#.#...................#..#.............................#...............#....#..............................###...........#.
....#...#...................#..................#...........####....#...............#....#..#.................#................#....
.............#..#.#..##.....#...#.......##.#...............#.........##..........#......................##....##....#.......#...#..
....#....#......###.#......#..#....#..#.........#....................................................#............#.........#.#....
.......#.#........##........#..#............#.##.............#..#...#....................#.#.....##.................#..............
....#....#....##...#..#......#.#.......................##......#.......................#..#.#..........#.#...........#..........#..
.#.......#..#......#......#..#............................##..........................#.............#.......#...##.#...............
...#..#...................#....#....#.....##...........#...............#...#...........#.#.#..#.#.#.#.#..#..#...#.#....#...........
.....................#..#.#..#..#..........#........#.................#.......#.......#.#......#.#..#........#............##.......
.......................................#...#.................###...##.#.....##.........##.........#..............#........#........
........#.##.........#........#.....##.............#...#...............#...................#..#.................#.........#.....#..
..#..#.#........#.....#.................................#............#.#....#.#...............##...#.....#............#..#.........
....#......#.....#....................#.........#.................#......................................................#.#....#..
....##...#...##..........#..............................#..#...#....#.......................#.#.#.....#.......#..#............##...
.#.....#.........#........#...#.....###...........#...............#.#...........#.#..........##..#..#................#..........#..
...#..#.#.#.......................................................#.##...#..........##............#..#.....#.........###...#....#..
......###.......#.#....##......#..#....................#........#.............#.#..........................#....#......###..#....#.
........#..........#......#....#.............#..#.................#..............................#.......#.#................#......
.#........#...........#.........#.....................#.........#........##.#.###......................####..#.#....#............#.
..##........#............#.#.......................#.....#.##.................#..#....#............................................
.............#..##....#.#.#...............#..................#.......##.#.....#...................##...##...#.##.............###...
......#..#....##.............................#.............................#..#....#....##.........#...#................#...#.##.#.
..#...........#........................#...........#....#...............#...............#...................#......................
....#...#.#.#...........#.#................###...............#.....##........#........................#.....##...#.#..........#....
.#..#.............#...#....##........#...#.............#............................#..#..#...........#...............##...........
...#......#..........................#.#.....##........#...#.......#...#...........##......#..............#..#.#...#.....#.#....#..
.#.#..............#................##.....#........#.....##...#....................#......#..#..............................#......
.#....................#.............#....#.............##.......#...........#.#......#...................##...#..............#.....
.....#.#...#.........##................#......#.....#...#....##.....................................................##.............
.............#........#............#.#.....#.........##.................##.....###.........#...............#....#..........#.....#.
..#.#...#....#...#......................##............#...#.#..#.........##.................................#......#........#....#.
..#.....#..................................#.#.....................#..#....#.....###..#.#...#..#.....#.......#..#..................
....#....##.#.....#.......................#.#...#......#.......................#.....#.........#....#...............#.......#......
....#.###.#......#...................#.............#...............##.........##........#......#....#..........#........##....###..
.....###....#...#.......................##.#....#.#...#.#..........#...#.....#......#.........#........#............#.....#...#....
...#.#.....#..#..............................##....#......#....#............#..#.#............#...#................................
...............#........##.#####.#......#.........................#....................#.#.#...##.#.##.#.#..................##.....
..#............................#.............#.#....#..........##.......#.#......#.#.#........#..#.#.##..................#.........
..##..##.#.............#..#.....#..#....#.#.#......#........#.................##.............#......#....#.#...........#......#..#.
..........##.#.........#.....##...................#.#...#...........................#........#...........................####......
.#......#.#.#.......#...............#.##..........#........#.................#..#.#.......#.............#....#.....................
.#.....#..#........#..#.....#...........#.#.....#.#.#...#..#..#.....#..........#.#......#............###.#.#...............#.....#.
..................##...#.......#...............#...........#.......#...............#........................................#......
.##.................#..#........#......##.............#..#.#..#....................#....................##.#.............###.......
.#......#...........#..........#...................#.........#.......##...........##..#......#.#....#.....#........................
.........................#.#.....#..#....#...#......#......................#............#................#.........................
....#....................#...#..#..............#..#...#..#..#...............#.....................#...........#..##...........#....
....#.........#...........#.....................#.#....#...#.................##.......#.#.........#...#............##..............
......................#........#...#...................#...#.###....#....#....#...............#....#...#....#......................
..................##......................##.....#...........#..........##..##.#......##............#.##...........................
.#.....................#.......#.................#..#........#...........#.#....#......#........#...........#......................
...........#.........#....#..#.#.#....#..#.......##.........#.............................#....#..#......#.#...#........#..........
.........#.........#.#....#.#.......................#..#......................#.................#....................#.#.#.........
......................#...#...#.........##.....#..............##......#...###......#...#....#.....##...........##........##........
............##..#.#......#...#.............#..#..#.........#...........#...#..#.........#...#......................................
...........#...........#..#......##..........#........#....#....#........#..................#...#.......##..#..#..#......#.........
.................................................................S.................................................................
..............#...#......#..#.....#................##......#............#........#........#..............#......#...........#......
...........#..#......#..#....#.....#..................#.....#...............#....#.....#..........#............#.#......#..#.......
..............#........#.#....#...#............#....#......#..........................................#.............#....#.........
..................#...#...............#.#...#..........#......................#.#.#.#.......#.....#..#........###..................
...................#.........##.#.#.....#..........#...........#.........#.#..#..##......#........#................................
.#.................#.....#.....#.##........#..........#...........#....#.....#...#.....#.........#..#........#.......#.#...........
..................#........#......##.#....##...#.#....#..#.....#....#...................#.....#...##...#.#......................#..
...##..............#..................#......................#.........##...#....#..#....#...........#.#..#........#...........#...
..#..#.............#................#............#............#.......#..#...##.....#.......#.......#.....#..................#.#...
..#.............#...................................#.............#......................................#..........#..............
.....#................#......#..#............#......#..#.##.#......#.......#.....#..#.........................##...........#...#.#.
...#.#............#......##........#.............#.....#..............#......###......#................#..................#......#.
....#...#.........#..#.##...###.#..............#........#..............#.#.........##....#.#.#......#....#.................#...#...
.##...#..#..........##............#........###.....#............#..#.........#............#.#.#........#..#..###............#......
.......#.................#.......#...#.......#..#......#..............#......#..##.................##....#.......................#.
...........................#.....#........#..#..............#.....##..........#....#..............#..#......##.............#.......
......#.................#................#...#.......................#.#.......##..#.........#....#.....##.............#.#.....#...
........................#.#.#.....##.......##.#........##.....#.....#...#....................#..........#..........................
.#...#........#............#.....#...#.....................#...........#.............#.##.#.....#......#.#...................#...#.
.....#..........#...........#...........................#.#.........#.............#..#.#..#...#.#....#..##..........#...........#..
.....#....#..#..................#....#...#......................#.......#..................#.......................#....#....#..#..
...#..............#...........#.#...........#.........#....#.........#.##.#..#......##.........#...##............##..#.#..#.....#..
..#............................#...#.....#......#.........#...#.....................#.....#.....#..#..#.............#..#...........
......#....#.....#.....................#.#.......#.#.#.....##.......#...#.............#..#.......#.............#..........#.#......
...............##..#................#.........#...##......#..#......#.#..#..........###..#..#..##............#..........#...#....#.
.#....#...........#..#.........#.#.#....#....#.........#.#............#....#...............##..................#.....#......#......
........#...#.....#.#................#...#....#..#....#.#..#.........#...#.................#..#.........................#..........
.........##...........................................#.................#...#.....#..#...##......#.........##............#...#.....
..#..#..#...#.#..................#....#.................#.#...#.........#.......#......##..#....#.........#......#....#............
...#...#......#....##...................##....#......#......#......#.......#.................#..#.............#.#..................
.#...#...#..##......#.#................#.#.................##..##.#..#...#.........#.........#..........................#..##......
.....................#..#..............#.......#..#...##.....................##...#....#.......................#..........#........
.......#.........#.#.....##..........#..#......#......#..#......#...#..................#....#......................................
.....#...#.....#........##......................##..................#..#...#.........###.#..#............................#.#....#..
........#....#...........#..#..........#.#.........................................#..#....#.......#...#...#...............###.....
....##..............#..#.................#..........#...........#.....#.....#....#....#.##....................#......#..#..........
..#..#..##..........##....#.#....................#.....#.#.....#............#.#........#............#....................#......#..
..........#..##......##........#....................#..#.#.............#......#........#.........#.....#....##..............##..#..
.#.......#...........#.......#.............#......###.....##.#....#....#..#....#...............................#.#..#...#.#....#...
............#....##...........#.............#.......................#......#.#...#...............##...#.....#...................#..
..#........#.........#....#..........................#....................###................#....................#.#..............
.....#..#.#........#............#.#..##.......#.....#..#...........#.........................#.......#.....#.......#........#...#..
.....##........................#..#.............#..............##.....#.....#.....#........#................#....#..##.#.........#.
..#...#........#.#...........#...#..............#.#.....#.....#.......................................#..#.#..................#....
...........#.#.....#..........#.#.......#.................#.......#.#...........#.............##........#.............#...#..#.#...
....#.....#....##.#........##..#..#.#........................#.........#.......#.........#.....###.....#.#.........................
.......#.....#.........#....#..#....#.....#..........#.#.#.........#.....#....#.........#.................#..........#...#.........
.#......#.........#..#...#......#.............................#...........#...............#.......#...#..........#...#......###....
.....................#..............#.#......#...........#......#....#.#...##.............#...##.#..#.###.#..............#.........
.#...#.............#.....#.....##..#........#............#..##....###....#.................#..#.#...##.#...#..........#...#.#......
.........#..#.....#..........................#.#..........##..#...##......................#...................#.....#............#.
.....#...##............#.........##...###......#...................#..................................#...........##..#............
.......#......................#....#...#..................#........#.#...#...........#.................#........#..........#.#.....
............#..............#.#.#..........#...#............#.......#............#.#.....#..##....#...#.#.....##........#...........
...........##.#..#...........#...#.....#.....#.............#......................#...........#...#.#.....#.......#..#..#..........
...#.#......#..#..#...............................#.............#.#..................#....#.#....#..............#................#.
.....#..................#...##.....#.#..#.#.#...................#..........................#.................#....#.....#..........
.............#..#..#....#.#..#..##...............#...............................#....#........#..#..#.......##.#........#.........
....#....#................##..#.........#.#..#....................#..............#...#......#...#..#...............................
......#....##.........##..............#....#....#.#..#..#....................................#...........#.#.#.#.###......#........
.#.#.....#.#..#.....#.....#.......##...#.......................................##......................#..........#.#....#..##..#..
............#..#.#........#..........#....#..#.....#.....#................#....##...........#...##....##.##....##.....##.#.........
...#....#...##..#.#.........#............#.........#.......................##..#.............................##....#..#.........#..
.......#.#............#...#...##....##.#..##..............#............#..............#....#.....#...#....##....#....#........#....
...................................................................................................................................
'''

# COMMAND ----------

# plots = {(row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c in 'S.'}
# start_pos = next((row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c == 'S')

# stack = [(start_pos, 0)]
# options = set()
# while stack:
#   pos, steps = stack.pop()
#   if pos not in plots:
#     continue

#   # if steps == 6: #
#   if steps == 64:
#     options.add(pos)
#     continue

#   for d in 'NESW':
#     new_pos = (
#       pos[0] + (d == 'S') - (d == 'N'),
#       pos[1] + (d == 'E') - (d == 'W')
#     )
#     stack.append((new_pos, steps + 1))

# len(options)

# COMMAND ----------

import collections
plots = {(row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c in 'S.'}
start_pos = next((row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c == 'S')

q = collections.deque([(start_pos, 0)])
can_reach = set() # steps%2, pos
while q:
  pos, steps = q.popleft()
  #if steps == 6: print(pos)

  if pos not in plots:
    continue

  if (steps%2, pos) in can_reach:
    #print(pos)
    continue
  can_reach.add((steps%2, pos))

  #if steps > 6:
  if steps > 64:
    #options.add(pos)
    continue

  for d in 'NESW':
    new_pos = (
      pos[0] + (d == 'S') - (d == 'N'),
      pos[1] + (d == 'E') - (d == 'W')
    )
    q.append((new_pos, steps + 1))

len({pos for i, pos in can_reach if i == 0})

# COMMAND ----------

# PART 2
import collections
plots = {(row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c in 'S.'}
start_pos = next((row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c == 'S')

lines = inp.splitlines()
n_rows = len(lines)
n_cols = len(lines[0])

q = collections.deque([(start_pos, 0)])
can_reach = set() # steps%2, pos

step = 0
reach_counts = []
while q:
  pos, steps = q.popleft()
  #if steps == 6: print(pos)

  if steps > step:
    # print(steps)
    reach_counts.append(len({pos for i, pos in can_reach if i == step % 2})) # Something like this
    step = steps
    # reach_counts.append(len({pos for i, pos in can_reach}))


  base_pos = (pos[0] % n_rows, pos[1] % n_cols)

  if base_pos not in plots:
    continue

  if (steps%2, pos) in can_reach:
    #print(pos)
    continue
  can_reach.add((steps%2, pos))

  # if steps > 6:
  if steps > 100:
  # if steps > 500:# Too big
  # if steps > 5000:
    #options.add(pos)
    continue



  for d in 'NESW':
    new_pos = (
      pos[0] + (d == 'S') - (d == 'N'),
      pos[1] + (d == 'E') - (d == 'W')
    )
    q.append((new_pos, steps + 1))

len({pos for i, pos in can_reach if i == 0})

# COMMAND ----------

reach_counts

# COMMAND ----------

reach_counts[50]

# COMMAND ----------

reach_counts[100]

# COMMAND ----------

# MAGIC %pip install fedot

# COMMAND ----------

# FEDOT api
from fedot.api.main import Fedot
# Tasks to solve
from fedot.core.repository.tasks import Task, TaskTypesEnum, TsForecastingParams
# Input data for fit and predict
from fedot.core.data.data import InputData
# Train and test split
# from fedot.core.data.data import train_test_data_setup

forecast_length = 144
task = Task(TaskTypesEnum.ts_forecasting,
            TsForecastingParams(forecast_length=forecast_length))

# COMMAND ----------

train_data_raw = [1,
 1,
 4,
 4,
 9,
 9,
 16,
 16,
 30,
 30,
 50,
 50,
 74,
 74,
 99,
 99,
 129,
 129,
 165,
 165,
 216,
 216,
 261,
 261,
 326,
 326,
 395,
 395,
 460,
 460,
 537,
 537,
 605,
 605,
 689,
 689,
 784,
 784,
 894,
 894,
 989,
 989,
 1107,
 1107,
 1196,
 1196,
 1324,
 1324,
 1464,
 1464,
 1594,
 1594,
 1735,
 1735,
 1853,
 1853,
 1988,
 1988,
 2145,
 2145,
 2324,
 2324,
 2479,
 2479,
 2665,
 2665,
 2794,
 2794,
 2982,
 2982,
 3186,
 3186,
 3380,
 3380,
 3585,
 3585,
 3753,
 3753,
 3938,
 3938,
 4155,
 4155,
 4402,
 4402,
 4617,
 4617,
 4871,
 4871,
 5040,
 5040,
 5288,
 5288,
 5556,
 5556,
 5814,
 5814,
 6083,
 6083,
 6301,
 6301,
 6536]

# COMMAND ----------

[b - a for a, b in zip(train_data_raw[:-1], train_data_raw[1:])]

# COMMAND ----------

l = [train_data_raw[i*2] for i in range(len(train_data_raw) // 2)]
[b - a for a, b in zip(l[:-1], l[1:])]

# COMMAND ----------

[train_data_raw[i*2] for i in range(len(train_data_raw) // 2)]

# COMMAND ----------

from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(train_data_raw, order=(5, 1, 0))
model_fit = model.fit()
print(model_fit.summary())

# COMMAND ----------

print('\n'.join(str(x) for x in train_data_raw))

# COMMAND ----------

import numpy as np
# Init model for the time series forecasting
model = Fedot(problem='ts_forecasting', task_params=task.task_params)
# Run AutoML model design
chain = model.fit(features=np.array(train_data_raw))

# COMMAND ----------

chain

# COMMAND ----------

# # PART 2
# import collections
# plots = {(row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c in 'S.'}
# start_pos = next((row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c == 'S')

# lines = inp.splitlines()
# n_rows = len(lines)
# n_cols = len(lines[0])

# q = collections.deque([(start_pos, 0)])
# can_reach = set() # steps%2, pos
# while q:
#   pos, steps = q.popleft()
#   #if steps == 6: print(pos)

#   base_pos = (pos[0] % n_rows, pos[1] % n_cols)

#   if base_pos not in plots:
#     continue

#   if (steps%2, pos) in can_reach:
#     #print(pos)
#     continue
#   can_reach.add((steps%2, pos))

#   #if steps > 6:
#   if steps > 5000:
#     #options.add(pos)
#     continue

#   for d in 'NESW':
#     new_pos = (
#       pos[0] + (d == 'S') - (d == 'N'),
#       pos[1] + (d == 'E') - (d == 'W')
#     )
#     q.append((new_pos, steps + 1))

# len({pos for i, pos in can_reach if i == 0})

# COMMAND ----------

len([pos for i, pos in can_reach if i == 0])

# COMMAND ----------

start_pos

# COMMAND ----------

Os = {pos for i, pos in can_reach if i == 0}
lines = inp.splitlines()
for row, line in enumerate(lines):
  for col, c in enumerate(line):
    print('O' if (row, col) in Os else c, end='')
  print()

# COMMAND ----------

lines = inp.splitlines()

side_len = len(lines) # Assume square
target = 26501365
remainder = 26501365 % side_len

# COMMAND ----------

# PART 2
import collections

plots = {(row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c in 'S.'}
start_pos = next((row, col) for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line) if c == 'S')

lines = inp.splitlines()
n_rows = len(lines)
n_cols = len(lines[0])

q = collections.deque([(start_pos, 0)])
can_reach = set() # steps%2, pos

cur_step = 0
reach_counts = []
while q:
  pos, steps = q.popleft()

  if steps > cur_step:
    if cur_step == 64:
      print(f'{len({pos for i, pos in can_reach if i == cur_step % 2})=}')
    if cur_step % side_len == remainder:
      reach_counts.append(len({pos for i, pos in can_reach if i == cur_step % 2}))
    cur_step = steps

  if (pos[0] % side_len, pos[1] % side_len) not in plots:
    continue

  if (steps%2, pos) in can_reach:
    #print(pos)
    continue
  can_reach.add((steps%2, pos))

  # if steps > 6:
  # if cur_step > 100:
  #   #options.add(pos)
  #   continue
  if len(reach_counts) == 3:
    print(cur_step)
    break



  for d in 'NESW':
    new_pos = (
      pos[0] + (d == 'S') - (d == 'N'),
      pos[1] + (d == 'E') - (d == 'W')
    )
    q.append((new_pos, steps + 1))

len({pos for i, pos in can_reach if i == 0})

# COMMAND ----------

reach_counts

# COMMAND ----------

def f(x):
  return 3724 - 14934 * x + 15024 * x**2

f((target - remainder) // side_len)

# COMMAND ----------

f(3)

# COMMAND ----------

f(202300+1)

# COMMAND ----------

(target - remainder) // side_len
