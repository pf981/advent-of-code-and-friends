# Databricks notebook source
# MAGIC %md https://adventofcode.com/2020/day/18

# COMMAND ----------

# MAGIC %md <article class="day-desc"><h2>--- Day 18: Operation Order ---</h2><p>As you look out the window and notice a heavily-forested continent slowly appear over the horizon, you are interrupted by the child sitting next to you. They're curious if you could help them with their <span title="Or &quot;maths&quot;, if you have more than one.">math</span> homework.</p>
# MAGIC <p>Unfortunately, it seems like this "math" <a href="https://www.youtube.com/watch?v=3QtRK7Y2pPU&amp;t=15" target="_blank">follows different rules</a> than you remember.</p>
# MAGIC <p>The homework (your puzzle input) consists of a series of expressions that consist of addition (<code>+</code>), multiplication (<code>*</code>), and parentheses (<code>(...)</code>). Just like normal math, parentheses indicate that the expression inside must be evaluated before it can be used by the surrounding expression. Addition still finds the sum of the numbers on both sides of the operator, and multiplication still finds the product.</p>
# MAGIC <p>However, the rules of <em>operator precedence</em> have changed. Rather than evaluating multiplication before addition, the operators have the <em>same precedence</em>, and are evaluated left-to-right regardless of the order in which they appear.</p>
# MAGIC <p>For example, the steps to evaluate the expression <code>1 + 2 * 3 + 4 * 5 + 6</code> are as follows:</p>
# MAGIC <pre><code><em>1 + 2</em> * 3 + 4 * 5 + 6
# MAGIC   <em>3   * 3</em> + 4 * 5 + 6
# MAGIC       <em>9   + 4</em> * 5 + 6
# MAGIC          <em>13   * 5</em> + 6
# MAGIC              <em>65   + 6</em>
# MAGIC                  <em>71</em>
# MAGIC </code></pre>
# MAGIC <p>Parentheses can override this order; for example, here is what happens if parentheses are added to form <code>1 + (2 * 3) + (4 * (5 + 6))</code>:</p>
# MAGIC <pre><code>1 + <em>(2 * 3)</em> + (4 * (5 + 6))
# MAGIC <em>1 +    6</em>    + (4 * (5 + 6))
# MAGIC      7      + (4 * <em>(5 + 6)</em>)
# MAGIC      7      + <em>(4 *   11   )</em>
# MAGIC      <em>7      +     44</em>
# MAGIC             <em>51</em>
# MAGIC </code></pre>
# MAGIC <p>Here are a few more examples:</p>
# MAGIC <ul>
# MAGIC <li><code>2 * 3 + (4 * 5)</code> becomes <em><code>26</code></em>.</li>
# MAGIC <li><code>5 + (8 * 3 + 9 + 3 * 4 * 3)</code> becomes <em><code>437</code></em>.</li>
# MAGIC <li><code>5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))</code> becomes <em><code>12240</code></em>.</li>
# MAGIC <li><code>((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2</code> becomes <em><code>13632</code></em>.</li>
# MAGIC </ul>
# MAGIC <p>Before you can help with the homework, you need to understand it yourself. <em>Evaluate the expression on each line of the homework; what is the sum of the resulting values?</em></p>
# MAGIC </article>

# COMMAND ----------

inp = '''6 * 6 * (9 + 4) + (8 * 7)
3 * 7 + 3 * (3 + 6 * 7 + 9 + 4) * 9
2 + 5 + (8 * 7) * 4 + 4 + 7
6 + 3 + 4
2 * 8 * 5 * ((6 + 9 + 3 * 6) * 4 * 6 + 3) * 7
7 + 3 + 4 * 6 + ((8 + 6 * 5 * 6 * 2 * 4) * 9 * 9 * 3)
(5 * 6 + 9 + 7 + 8) + 9 * (7 * 9 + 6 * 2 + 3)
(7 + 6 * 3 + 5) + (2 * 3 + 6 * (9 * 2 * 6 * 3 + 6 * 3))
3 * 8 * ((9 + 4 + 2 * 2) * 9)
6 * (2 + (7 + 4 + 3)) * 9 * 8 * 7
5 + 7 * 2 * (6 * 3 + 2 * (4 * 4 * 8)) + ((4 + 5 * 6 + 7 + 3) + 9) * 4
5 + 5 * (3 + 6 + 8)
5 * 5 + 6 * 6 + 2 + (2 + 6)
(3 * 6 + 8) * 8 + ((2 + 5 + 4 + 9 + 4 + 8) * 2) * 7 * (2 * 6 + 8 + 5 + 2) + 2
7 * 7 * 3 * 9 + (4 * (6 + 3) + (9 + 2 + 9) + (5 * 3 + 6 * 3 * 8) * 2 * 9) * 9
3 + ((8 + 9) + (6 * 8 * 9 + 4 * 8 + 2) * 2 + (9 + 3 + 8 * 5 + 3) * 8) + 8 * 8 + 8 + (9 * 2 + 8 * 9 * (7 * 3 + 3) * 2)
(3 * 7 + 5 * (6 * 3 * 2 + 8 * 6)) * 9 + 6 * 3 + 6 + 4
(7 + 7 + 9 * 8) * 6 + 5 + 8 * 4 + (5 + 4 * 5 + 4)
(3 * 6 * 3 * 3 + 3) * 7 * 4 * 3
6 + 8 + 3 * 6 * (8 * 4 + 7 + 2 * 5) * (6 * 4 * 9 + 2 + 6 + 3)
7 + 8 + 6 * 5 * 4 + 7
4 + (4 + 7 * 3 + 8) + (4 * 5) + 9 + (8 * 7 + 5 + 3 + 8 + 9) * 6
4 * 5 + 2 * (9 + (3 + 9 + 2 + 3 + 4))
2 + 9 + (4 * 3) * 9 * 8
2 + 8 * (8 + 6 * 3 + (9 * 6 * 7 + 7 + 6) * (6 + 2 + 9) + (2 * 6 * 2 * 2 + 8))
(2 * 5 * 5 + 7 + 8) + 4 * (8 * (4 + 8 * 7 + 3) * 4 + 2 * 8 + 2) * 7 * 6 + 4
5 + 8 + 7 * 9 + 3 * (6 * (2 + 5) * 2 + 3 * (6 + 7))
3 + 2 * (7 * (8 * 8) * 4 + 2 + 4 * 9)
(5 * 4 * 4 + 7) + 5 * (6 + 8) * 7
5 + 4 + ((8 * 9 * 8 + 6) + 4 * 9 + 3 * 6 * 8) * 5
(6 + 5 * 9 * (3 + 7 + 2 * 2 * 7 + 7)) * 7 + (7 * 4) * 4 * 5
6 * 8 + 6 + (5 + (7 * 6 * 7 * 5 * 4 + 8) * 5 + 7 * (7 + 4 * 5 + 6) + 7) + (6 + 6 * 6 + 7)
(6 * 8 + 4 + 6 * 5 * 9) * 5 * ((4 * 3 * 5 * 2) * (4 + 7 + 8 * 4 * 5 + 6) + (6 * 4 + 4 * 7) * 7 + (9 * 8) * (5 * 2 + 7 + 3 * 2)) + 6 * 6
(8 + (9 + 2) * 2 * 2 + 2 * 8) + 5 * 4 * 2 + 4 + (5 + 9 * 7)
(5 * 4 * 5 + 2 + 5) * 3 + (8 + 9) * 9 * 2 + (5 + 7 * 5)
(6 + 3 * (8 + 6) * 4 + 8 * (4 * 5 + 6)) * 2 * (6 + (5 + 5 + 9 + 3 * 2 + 7) + 7 + (2 + 6) + (8 + 8 * 2 * 5))
6 + 3 * (2 + (3 + 8 + 9) + 4 + 4) * 4
6 * 5 * (2 * 6 * 5) * ((9 * 2 * 5 + 8 + 4 + 3) + 3 * 9) + 6
3 + (9 * 6 * 5 + 2 * 4)
5 * 4 + 2 * 3 + (8 + 9 + 9 * 6 * 4 * (3 + 8 + 4 + 2)) + 6
2 + 7 * 6 + (2 * 5 * 9 * 6 + 8)
3 * 7 + 9 * (4 + 4 + 8 + 8 * 7) + 3 + (9 * 2 * 7 + 6)
2 + 8 * 9 * (7 * 9 * 6 + (3 + 3) + 3) + 5 * 4
9 + 9 * 9 + (9 * 5 + 7 + 6)
6 + 7 + ((3 * 7 + 6 + 5) + 3) * 6 + 6
7 + (4 + 6 * (4 * 2 + 5 + 5 * 8 + 4) + 3 + 4) + 4 + 9 + 3 + 4
((4 + 8 + 4 + 5 * 8) + 5) * 9 + 3 * ((7 * 6) + (7 * 9 * 9 * 4 * 2 + 7) + 6 + (6 * 2 * 3 * 8)) + (9 * 4 + 7) * ((5 * 6 + 2) * 7 * 3)
(4 + 8 + 5 + 2 + 7 + 8) + (9 * 5) * 8 + 8 + 2 * 8
(8 * 4 * (7 + 6) * 5 + 3) + 5 + 5 + (8 + (4 * 9 * 5) * 7)
2 + 2 * (6 + 6 + 6 + 7 + 9 + 5) + 2 * (8 * 2 + 9)
5 + 6 + 2 * 2 * 3
6 + 6 + (8 * 6 * 3 * 3)
((4 + 8 + 8) * 8 * (4 * 7 + 8 + 9 * 7)) * 9 + ((4 * 6 + 5 + 3 * 2 * 4) + 9 * 4) * 6 * (4 + (6 + 4 * 6 * 8 * 3 + 2) + 4) * 4
(3 + 7 + (5 + 2 + 5 * 8 + 8) * 8) + (4 * 8 * 3 * 2 * 6) * 3 + 8 * 5
((3 + 7 * 6 + 2) * (4 * 6 * 7) + 3 * 7) * 2 + 7 * 5
5 * 9 + 5 * 2 * 8 + 8
(8 + 3 * 6) * 7 * ((2 + 4) * 4) * (3 + (6 + 2 + 3 * 2 + 3 + 5) + 3) * 2 * 8
(9 + 7 + 9 + 2) * 6 * 4
3 * ((9 + 5 + 7) * 6 * 4) + (6 + 3 + 4 + 9 + 3 * 8) + 9 * 4
(5 * 8 + 4 + 7 + 3) + 5 * 5 + ((9 + 9) * 5 + 9 + (4 + 4) * (7 * 7 + 2 * 8 + 2) * 6)
((7 * 4 * 6 + 2) * (3 * 7 * 9) * 6 + 8) * 4 + (8 + (2 + 3 + 3 + 4) + (5 * 4 * 2 + 2) * 5 + (8 * 8 + 9 + 7 * 4 + 6) * 6) + 7 * 5
3 + ((7 * 4 + 4) + 6) + 6 + (5 + 7 + 5) + ((4 * 4) + 3) * (9 * 5)
(9 * 5 + 3 + 7) * ((4 * 9 * 9 * 9 * 2) * 4 + 4)
6 * (7 + 6 * (4 * 9 + 5 + 7) * 8 * (5 + 2 + 9 + 6 * 6 + 5) + 2) + (9 + 9 * 8 * (4 * 5 * 2 + 6 + 5 * 6) * 4 * 7) * 8 + 3
(9 * 7) + (2 * 4 * 2 * 9) * 2 * 6
(2 + (6 * 9) + 9 * 5 * 3) * 2 * (8 + 7 + 4 * 4 * 6) + 3
(6 + 3 + (4 + 2 + 2 + 9 * 3) * 5 * (3 * 6 * 3 * 2 + 6) + (6 + 8 + 6 + 4 * 5 * 5)) + 3
2 * 8 * ((7 + 9 + 2 + 3) * 5 + 2 * (8 * 3) + 3 * 5) * (4 + 7 + 7 + 7) + 2
4 + 5 * (6 + 8 * (6 + 9 * 5) * 8) * (4 + 9 + 9 + (3 + 7 + 7 + 8) + 3 * 5) * 9
(4 + 8 * 7 * 2 + (3 * 3 + 6 * 9 * 6) + 3) + 6
5 + (5 + 9 + (4 * 5 * 4 * 4 + 2 + 5) + (8 + 8 + 4 * 9 + 6)) + 2 * 4 * 8
4 * (5 * 3) + 9 * 6 * 9
9 * (3 * 4 + 6 + 2 + 6) + 9 * 4 * 7
3 * 7 * 9 + (7 + 2 * 9 + 4 + 7 * 2) * 6 * 8
(7 * (6 + 7 + 4 * 8) * 7 * 9 + 6) + 9 + (8 + 9 * 9) * 6
2 + 6 * (9 + 9 + 3 * 3 + 8 + (5 * 5)) + 7 * 8 + (8 + 3 + 3 * 5 * (9 * 6 * 6 * 2 + 6 + 4) * 4)
8 + (8 * 2 * (6 + 5 * 2 + 6 + 8))
9 + 9 * 4 * 4
(8 + (7 + 3 + 3)) * 3 + (4 + 7 + (3 * 9 * 3 * 8) * 4 * 8) * 6
(5 + 7 + 5 + 3 * 5) * 7 + 6
5 * 3 * (2 + 3 * (8 * 8 + 6 + 9 * 3) * 9) + (4 * (8 + 6 * 6 * 5) + 7 + 5 * 2) * 6 + 7
8 * (9 + 3 + (2 * 6 * 6) + 3 + 4 * 8) * 5 + (6 * (8 + 4 + 8 * 2 * 8) * 4 + 3 * (7 * 7 + 5 * 5 * 3 + 3)) * 9
7 * 9 * (4 + 4 + 3 + 3 + 2) * 2 + 2 + 6
8 * 8 + ((7 + 2 * 7 * 9 * 2) * 4 + 9 + (9 + 2 + 5 + 6) + 7) + 4
2 * 8 + (9 * 6 * 3 * (9 * 9 + 3 + 3 * 6) * 3) + 7
((6 + 7 + 6) * 8 + 7 * 7) + ((2 + 8) + 8) + 9 * 3
(8 + 8 + 9) * 6 * 4 + 9 + 4
8 * 8 * 6 + 9 + 3 + 2
7 * 8 * 7 + (2 * 9 * 9 + 9 * 8) + 2 * 5
3 + (7 * 9 * (7 * 2 * 9 + 4) + 5 * 5 + 8) * 7
4 + 3 + 4 * (6 + 2 * (2 + 8 + 9 + 2 * 9 + 2) + 3 * 5)
(5 + 2 * 7 * 9 + (9 * 7 * 6 * 5 * 9)) * 6 + 5 + 2 + 3 * 4
(7 * 7 * (2 * 8) * 6) * 5 + 3 * 8 + 2 + 2
5 + 9 + 8 * (6 * (5 + 7 + 7) * 7 * 5 + 4 + 2) + 4
5 * 5 * (7 * 6 + 6 * 7 * 9 + (2 * 3)) * 4 + 3 * (2 * 5 * 9)
6 * 4 + (7 + 4 * 4) + (5 * (3 + 9) + 6 + 7 * 8)
(3 + 3 * 8 + 5 * (2 * 2 * 9 * 4 * 6)) * 9
((2 + 2 * 6 + 3 + 8) * 5 + 7) * (9 + (7 + 2)) + ((9 * 9 * 6) + 7 * 6 * 5) * ((5 * 8 * 6 * 7 * 6 + 5) + 8 + 5 * 9 + (9 * 5) + (4 + 7 + 9 + 4)) + (5 * 6 + 7 + 8 * 7 * 3) * 2
3 + 6 + (5 * 4 + (4 + 2 * 8 + 3)) * 4 + (7 + 6 * 4) * 2
6 + 8
8 * 4 + 7
8 * (3 * 4 + 4 * (2 * 9 + 8 * 9 * 7 * 6) + 4 * 6) * 7 * 7
((8 * 3 + 6 + 2 + 7 + 4) + 8) * (7 * 3) + 9
4 + 8 + 7 * (4 * (7 * 6 * 4) * 4 * 4 + 4 + 8)
5 + (3 + 7 + 3) * (3 * 9) * 8
(6 + (3 * 5) * (4 * 9 + 6 + 3 * 7) * (6 + 7 + 6) + 9 * 6) + 5
9 + 8 * (4 * 8 * 4) + 7 * 8 + 6
9 + (3 + 8 * 3 * 2 * 7 + 8)
4 + ((4 + 9 * 4 * 5) * 7 * 6) + 6
8 + (4 + 6 * 8 + 7) * (4 + 8 * 7 * (4 * 7 * 6) + 9) * 3 * 9 + 7
4 + 3 * ((6 * 6) * 2) + (7 * 5 * (2 + 5 + 8 * 5 + 5 + 2) + 8 + 3 + 9)
2 * 9 + (6 * 6 + 7) * 4 * 3 * (9 + 2 + (9 + 3 + 7) + 8 + 3 + 5)
(2 * 5 * 7 * 9 + 3) + 9
7 + 9 + (9 + 3 * 3 * 7 * 2 + 8) + 8 * 6
2 + 3 * 5 * (3 * 3 + 4 * (4 * 4 + 4)) * 5
9 + 3 * (5 + (5 + 8)) + 3 + (5 + 2 + (4 * 7 * 7 * 5) + 2) + 7
(9 + 3 * 9 * 8 + 5 + 8) + (3 * 6 + 3 * 4 + 8 * 6) + 2 * 2 * 3 + 8
7 * (9 + 2 + 3 * (5 * 8 * 7 * 2) * (6 * 6 * 2 * 9 * 7)) + 6 + 3
3 + (8 + 8 * 5 * 8 * 7) + (5 * 6) * 9 + (3 + 5 * (4 * 9 * 5 + 9 + 4 * 3) + 6) + 5
(6 + (9 * 2)) + 7 * 7
9 * ((5 + 7 + 8 * 9 + 9 * 3) * 8 * 8 + 9 * (8 * 2 * 3 * 2 + 9)) + 4 * (4 + (5 * 4 + 6)) * 3 * 3
7 + 9 + 9 + 5 + ((2 * 8 + 6 + 4 * 6 + 4) * 8 * 5) * 9
3 + 9 * 4 + 3 + 6 + (6 + 3 * 5 + 6 * 2 + 3)
4 + 2 * (5 * 6) + 2
5 + (6 * 2 + (3 * 4) + 9) + 5
3 * (4 * (6 * 6 * 5 * 8)) + (4 + 4) * ((2 + 7 * 7 * 6 + 7) * 9 + 2 * 5 + 3)
5 + ((6 + 2 + 5 * 3) + 7 + 5 * 5) + 5
8 + (6 + 4 + 8)
6 * (9 * 4) + 8 + (5 + 2) * 4
2 * 9
(5 + 4 + 7 + (4 * 5 + 8) + 4 + (9 * 7 * 6)) + 4
3 * 5 * 5 + 6 + (3 + 3 * (3 * 6 + 2 + 6) * 5 + 3)
3 * 2 + 3 + 2 + 7 * (4 * 3 * 6 + 9 + 5)
((6 * 6 * 9 + 8) + 4 + 5 + 4) + 3 + 9
7 * 2 + (8 * (7 * 2 * 8) + 5 + (3 * 4 * 8 * 9 + 7 * 8) + 3)
6 * 3 + (8 + 4 + 5 + 6 + 7 * 3) + 6
5 * ((8 * 7 * 9 * 8 + 9) + 9 * 9) * (5 + 2 * 9 + 5 * 8 * 8) + 6
8 * (5 * 9 + 3 + 5 + 4) * 7 * (5 * (6 + 7 * 7 * 4 * 3) + 9 + 6 * 6)
3 * (6 + 5 * 3 * 9 + 2 + (5 + 5))
7 + (9 * 5) + 9
2 + 4 + (9 + 3 * (6 * 8 * 8 * 8 + 8) * (6 + 7 * 5) + 8)
(5 * 6 * 8 + 5) * 7 + 9 + 8 * 4
9 + (3 + 4) + 6 * 6 * 3 + ((3 + 4 + 2) + (2 * 2 + 7 + 5) + 7)
9 * (2 * (2 * 2 + 6 * 6) + 4 * (5 + 6) * 9 + 9) + 2
(7 + 2 * 2) * 9 * ((2 * 7 + 9) * 7 * 7 + (4 + 9 + 7 * 3 + 6) * 4 * 5)
8 + 3 * 5 + 7 + (6 * 9 * (2 * 7)) * (2 + 7)
(8 + 7 * 7 * 2) * 8 + ((4 + 4 + 8 * 5) + 2)
5 * (5 + 6 * (4 + 8 + 7 * 3 * 7 + 6) * 3 * 5)
(5 * 5) * 6 * 8 + 5
9 * (5 + (3 * 8) + 9 * 3) + 2 * 2
(3 + (7 * 4 + 2 * 4 * 6) + 5 + 7) * 8
8 + 7 + (5 + 3 + 5 + 9 * 8) * 9
3 * 3 + 5 * 9 * (8 * (9 + 4 + 3) * 8 + (3 * 9 * 6 * 7 + 9 * 4) * 3) * 8
(7 + (7 * 7) * 5) + 4 + 5 * 5 * 8
3 + 4 + 9 + 8 * (6 * 2 * 2 * 9)
(7 * 3) + 3 * 7 + (3 + 8) + 3
(4 + 7 * (2 * 7) + 7 * 6 * (5 * 9)) * 2
3 + 9 + 7 * (3 + 2) + 7
2 * (9 + 4 * (3 * 7 + 6 * 4))
(2 + 3) * 2 * 4 * 5 + 6
4 * 4 + 2
7 * ((2 + 2 * 8 * 5 + 9 * 9) * 8) + 2 + 9 + (3 + 4 * 6 * 3)
5 * 5 * 6 * ((5 + 3 * 7 + 3 * 9 * 5) * (2 + 8) + 8 + 3) + 5 + 7
7 + (8 + 2) * 8 + 2
8 * 3 * 4 + 5 * ((2 * 5 + 7) + (8 + 6 * 7 * 4 * 8) * 3)
2 * 6 + (4 + 8 + (4 * 9 * 2 * 9 * 7 * 3) + 4 + 4 * 6) * 6
(2 * (4 * 4 + 4)) * 2 + 6 + 2 + 2 * 8
9 + 8 * ((6 * 3 + 5 * 9 * 9) + 5)
(7 + 7 + 6 * 4 * 9 + 6) * 6 + 5 * (8 * (5 * 9 + 3 + 3 + 2 * 9) * (5 * 8 + 8) * 6 + 6) * 5 + 8
9 * (8 + 7) * 6 * ((9 + 5 + 7 + 8 + 8 + 7) * (9 * 2 * 9) + 7 * 7) * (4 * 8 + (9 * 6 + 9 + 5 * 5 + 9) * 2 + (5 * 5 + 8 + 7 + 9)) + 2
3 + 6 + (2 + 9) + 5 + (7 + 4 + 9 + 6 + 8)
5 * 5 + ((9 * 2 * 6) + 8 + 5) * 4
(4 + (9 * 6 * 7 + 7 * 7 + 6) + 6 + 8) * 5
6 + 8 + 5 * 8
3 * (8 * 4 + 8 * 3) + 8 + 9 + 7
5 + 6 + 3
6 * 3 * 3 + (3 + 3 * 2 + (7 * 9 * 5 + 8) + 4 * 7) + (6 * 5 + 2) * 7
(3 * (7 * 4 * 6 + 8 + 8 * 6)) + ((3 * 2 * 6) * 6 * 3 + (9 * 5 * 4) * (2 * 8 + 4 + 8) * 2) * 6
(8 + 9 + 2 + 4 * (2 * 9 * 7) + (3 * 7)) * ((7 * 8 * 9 + 6 * 7) + 6 + 6 + 7)
3 + 8 * 2 * 5 * 9
8 + ((6 * 6) * 4) * 7 + 9
5 * (6 * (7 * 5 + 9 + 2 + 7 * 8) + 7 * 3 + (8 * 7))
2 * 4 * 4 * (4 + 6 + 2) * (9 + 5 * 7 + (2 * 2 + 2 + 9 + 3) + 4)
7 + 6 + (9 * 2 + 5 * 8 + 3 * 4) * (8 * 4 * 5 + 7 * 6)
4 + 2 * 5 * (4 + 8 * 8)
9 * 9 + ((6 * 6 + 6 + 9) + 2 * 3 + (9 + 9 * 5 * 6 * 4 * 4) + (5 + 7 * 2 * 3)) + (9 * 5 + 9 + 8) * (3 + 6 * 4 + 5 + 8 + 2) + 6
6 * (7 + 3) + 9 + 9 + (3 * 7 * 5 * 5)
((9 * 5 * 7 + 6 * 9 + 4) + 6 + 8) * 7 * 9 * 8
8 * 6 + ((8 + 6) + (4 * 5) * 7 + 5 + 3) + 7 + (4 + 5 + 5 * 2 * 6 + 8) * 5
(9 * 2 + 5 + 4 + 7 + 6) + 3 * 8 + 5
(7 + (8 * 7) * (5 + 3 * 3 + 2 * 5 + 5) + 2) * 7
(6 + 8 + 2 + 3) + 5 + 3 + 5 * 7 + (2 + 2 * 7)
(5 * 6 * 2 + 2 + 8 * 9) + 3 * 6
2 + (4 * (3 * 5 * 9 * 9 * 8 * 8))
7 * (8 * (5 * 9 + 9 + 5 * 2) + 3) + 3
5 + 2 + ((9 * 4 + 4 * 7 + 2) + 2) + 9
((6 + 3 * 9) * 3 * (7 + 5 + 7 + 8 + 4 + 8) * 7) + 7 * 9
6 + (4 * (8 + 4 * 2) + (5 + 7 * 3 + 4 + 5))
8 + 7 * 4 + 5 * 3
8 * 6 * 7 + 2 + (3 * 3 * (7 + 4 + 4 * 8) * 4) * 4
8 * 8 + 8 * 3 * ((9 * 9) + 3) * (8 * 2 * 4)
(4 + (8 * 6 * 4 * 4 + 4) + (6 + 9)) + 2 + 4 * 4 + 4 * (7 * 8 + (5 + 7) * 7 + 4 * 4)
((3 + 7 + 3 * 3 * 3 + 3) + 3 * 4 + 2) * 8 * 5 + 2 * (6 * 3 + 3 * (5 * 9 + 5 * 4) * 2 * (4 + 4 + 7 * 9 * 2))
(6 * 7 + (2 + 5 * 9 * 3 + 7 * 3) + 3 + (5 * 3 + 8)) * 4 + 7 * 9 + (7 + (7 * 6 + 6 * 5 * 5) * 6)
6 * 4 * 5 * 5 * ((8 + 5 * 7) * (6 * 8 * 4 + 9) * 2 + 6 + 2)
6 * (2 * 4 * 2) + 4
4 + 6 + (3 * 2 * 7 * 4) * ((9 + 2 * 4 + 5) + 6 * 3) + 6 + 9
9 * 3 * 3 + 4 * 6 + ((5 * 9 + 9 * 6 * 5 + 2) + 6 + 9 * 2)
3 + 9 * 2 * (2 * 2 * (9 + 7 + 9 * 9 + 7 + 3)) * 8
((5 * 6 + 2 * 9 * 8 * 5) + 6 + 6) * 7
((4 + 9 * 2) * 2 * 4 * 3 * 3 + 7) + 5 + 2 * 4 * (7 * 3 + 6 * (8 * 4 + 6) * (9 + 9 + 8 + 6 * 2))
7 * (7 + 7 + (7 + 7 * 6 + 4 + 3) + 5)
(7 * 3) + (3 + 5 + 7 + 2) * 2 + 2 * ((2 * 7 + 6 * 8) + (8 * 5) + 2)
(5 + 8 + 2 + 4 + 3 * 5) + (8 * 2 + 8 + 4 + 5 + 7) * 6 * 8 + ((4 + 6 * 8 + 4 * 5) * 5 * 3 + 4)
(9 + (8 + 6 * 9) * 4 * 9) + 3 * 6 * (2 * 6) * 6 + 2
5 * 9
2 + 8 * (4 * 2 + (3 * 9) * 4 + 5 * 6) * 3 + 6
(7 + 4 * 9 + 2 * 8 * 5) + 9 * 2 * 7 * 8
6 * ((7 * 7 + 3 * 5 * 6) * 5 * 6 + (3 * 8 * 7) * 3 + 9) * 2
((5 * 6 + 8 * 2 * 4) + 6 + 8) + 5 * 5 + 6
4 * (4 + 2 + (9 + 3 * 7 + 8 + 2) * 2 * 4) * (9 + 8 + 6 + 8 + (6 + 3 * 2 + 7 + 4 + 7))
(9 * 9) * 6
9 + 5 + (6 * (7 + 7 * 5 + 2 * 6 + 2) * 7)
7 + 8 + 6
(2 * 4 + 7 + 2 * 4 * 8) * 5 * 2 * 5 + (8 + 6 + 3 * 8 + (4 + 7 * 2 * 7)) + 7
2 * 6 + 3 * 7 * (6 + 7 + 3 + 4 + 6 * 8)
9 + (9 * 3 + 7) + 3 + 3
6 + 4 + (4 + (4 * 8) * (9 + 9 * 4) * 6)
(3 * 3 + 7 + 7 + 3) * 5 * 7 + (6 * (7 + 7 + 6 * 2 * 6 * 6)) + 2 + 5
6 * 8 * (8 + (7 * 8 + 3) * 9 + 5)
3 * 4 + 3 + (4 + 2 * 2) * 8 + (8 * (2 + 5) * (5 * 3 * 9 + 2 * 6) * 9)
((8 * 6 + 5) + (6 * 3 * 6)) * 7
(8 * 4 * 2 + (5 * 8 * 5 + 7 + 3 + 5) * 8 + 5) * 7 + (6 + 9) * (8 + 3 * 7) + (9 * 9 * 6 * 2 + 8) + 2
7 + 5 * (8 + (6 * 8)) + ((9 * 4 + 5 * 5) + 8 * 5 + 3 + 8 * 4) * (8 + 3) * (8 + 8 + (6 * 4 * 2 * 5 + 7) + 3)
9 + 7 * 6 + 2 * 3 + ((2 + 6 + 9 * 8) + 3 + 9 * 3 + (3 + 3 * 4))
7 * (8 * 9 * 5) + 6 * (3 + (5 + 4 * 4)) * 2 + 9
4 + 7 * 5 * (8 * (5 + 5 + 6) + 5 * 6 + 9)
4 + 3 * (2 * 2 + 8 * 2) * 7 * 5 * 6
4 + 7 * 5 * (6 * 6 * 3 + (8 + 8 + 3 * 7 * 4 * 8)) * (5 * 6 * 9 + 7 + 9)
((4 * 6 * 2) + 2) * 8 * 7 + 2
9 + 7 + (4 + 4 + 2 + 2 * 4 + 9) * 8 + 8 + 7
(8 + (7 + 8) * 6 * (5 + 6 + 9 * 8) * 6 + 9) + 5 * 9 + 8
((5 + 2) + 7 + 2 + (4 * 6 + 8 + 6) * 6) * 6 + 5 * 4 + 9
4 + 5 * 6 * 7 * 9
8 * ((6 * 6 + 6 + 4 * 4 * 8) * (9 + 3) + 6 * (7 + 6 * 2)) + 2
((3 + 5 + 9) + 7 + 4 * 2 + (9 + 7 + 5 * 8) * 9) + 2
3 * ((6 * 9 * 6 * 5 + 5 + 4) + 8) + (6 * (8 * 6 * 3 * 7)) + 3
(9 + 9 + 2 * 2 * 3 * (9 + 4 + 9)) * 5 + 4 * 7
(4 * 4 + 9) * 8 * 8 * (9 + 3)
5 + (3 * 5 + 2 + (2 * 7) * 4 + 8) + 6 + 9 + (2 + 7 * (3 * 6) * 6 * 6 + 8)
2 + 4 + (5 * 3 + 6 * (7 * 7 * 4 + 3) + 6 + 7) * 2
(5 + 6 + 3 + (8 * 3)) * 3 + 6
4 + 6 + (3 * 9 + 5 * (7 * 9 + 4) + 4 + 4) + 3 + 5 + 6
4 * 9 * 7 + 2 + 6
6 * (5 * 5 + 3 * 8)
5 + 6 + 3 * 7 * 5 + (8 * 3 + 4 + 7)
(3 + 2 * (2 * 2 + 5 + 2) * 3 * (7 * 6 * 2 + 3) + 2) + ((9 * 6 * 7) * (2 + 7 + 8 + 2 + 6 * 4) * 7 + 9) * 6 * ((6 + 7) * (4 * 6 + 4 * 7) * 9 * 3) * 2
9 + 2 + 7 * (6 * 5) * 6 * 6
(7 * 6 + 7) * 6 + 3 + 6 + 2 + 7
6 * 4 + ((3 + 5) + 8 * 8 + 3 * (7 * 3)) + 3 * 9
5 + 4 + ((6 * 8 + 4 * 9) + 7 * (6 * 3 * 4 * 4 + 5 + 3) * 5 * 6 + 9) * 2 * 5 + 8
3 + ((7 + 7 + 3) * 8) + 7 + 8 * 2 * 9
3 + 9 * 2 * ((8 + 9 * 8) * 4 * 9 + 2) * 2 + (5 + (3 + 8 + 4 + 3 * 8) * 8 + (8 * 9 + 7 * 4) + 6 * 7)
6 + 4 + 7 + ((9 * 7 + 6) + 6 * 2 + 6 + 2 + 5)
7 + 8 + 5 * 3 + (8 * 5 * 3 + 7 + 4)
(4 * 7) + 5 * (8 * 9 * 6 * 7 + 6 * 8)
8 + 5 * 7 * 6 + (9 * 2 * 3 + (7 + 7) * 9 + 4)
((5 * 8 + 9 * 6) * 8 * (3 + 5 + 5 + 7)) * 5 + (6 + (2 * 8 * 4 * 6 + 7) * 5) + 7
6 * 8 + (3 + (7 + 3) + 8 * (6 + 9 + 9 * 9 + 2 + 2) + (8 * 6 + 5) + 2) + 5
7 + 6 * 7 + 8
7 * (3 + (3 + 7) + 4) * (5 * 7 * 6 * 2) + 5 + 3 * 5
3 + (4 * 7 + (4 + 6 * 7 + 8 * 7 * 4)) * 8
((9 * 3 + 6 * 7 + 9 + 6) + 6 + 7 + 4 + 2 * (5 + 6 * 2 * 4)) * 5
(8 + 7 + 7) + 7 + (3 * 6 * 6 + 9 * 2)
(7 + (3 + 6 * 8)) + (9 + 6 + (8 * 5 + 7 + 3) * 2 + 4)
(6 + (7 + 5 * 5 * 7)) * ((8 + 3) + (5 + 4 * 5 * 8 + 6 + 6) + 9 * 3 + 8 + (4 + 2 * 5 + 3 * 6 + 5))
8 * 7 + 8 * (2 * 9 + 5 * (5 * 2)) + 9 * 2
2 + 9 * 8 * 7 * (2 + 9 + 7 * 7) + 5
4 + (8 * 2 + 7) * 7 + 3 + 8 * (7 + 8 * 9 + 2 * 2)
(7 + 7 * 2) + 4
(9 + 5 * 3 + 4) * 4
2 + 2 * (9 * 7 + 5 + (2 + 8) + (5 * 6 + 8 * 5)) + 2
4 * (4 * (8 + 9 + 3 * 5 * 8 + 2) + (5 * 2) * 3 * 4 + 6) + 2 + 7
4 * 2 * (7 + 2 + 9 + 7) * 9 + 2
(6 + 2 + 4 * 3) + 8 + 9 + 5
7 * 4 * (5 * 3 * (6 * 4) + 2) + 6
5 * 5 * (6 * (5 + 7 + 4 * 2 + 7 * 9) + 8 + 8 * 2)
(6 * 4 * 2 * 6) + 6 * 7 * 9 + 2 + 2
3 * (8 * 4)
(8 + 9 * 7) + 8 * 7 * 4
4 + (9 * 6 + 3 + 5 + 2) * 5 + (4 + (4 * 5 + 2 + 4 * 2) + 3 + 2 + 5) * (9 + 5)
(6 * 7 + 6 + 9 + 7) * 5 + ((9 + 6) * 9 * 7 + 2 + 9) + 2 + (3 * 2) + (3 + 7)
(4 + (6 * 7 * 5 + 7)) * 4 * 7 + 5
(3 + 9 + (8 * 8 + 6 + 8 * 9) + 8 + (5 * 3 * 4 * 5) * (3 + 8 * 7 * 7 * 2 * 3)) * 5 + (6 * (3 + 7 + 4) + 4 + (5 * 9 * 6 * 2 * 8 + 4) * 4)
7 + (5 + 9 + 9 + 7) * 8
5 + 3 + 8 + 3 * 4 * 2
(3 * 5) + 7 + (3 * 5 * 6 + 6 + 2) * 7 + (5 + 7 * 7 * 5 + 8)
8 + 5 + ((3 * 5 + 8 + 8 * 7 + 7) * 2 + 2)
((7 * 5 + 2 * 5) * 6 + 5) * ((4 + 7 + 3 * 5) * 8 + 4 * (3 + 9 + 5 + 8 * 7 + 8) + 5 * 2) + (8 * 9 + 8 + 7 * 6 * 8) * 4 * 3
4 * (5 + (7 * 5)) + 5 * (8 * 6 * 8) + (8 + 6 * 3 + 5) * 5
2 + (8 + 5 + 5) * 9 * 3 * (5 * 3 * 5) + ((4 * 4 * 4 + 5 + 7 + 3) + 9 + (2 + 7 * 5) + (9 + 9 * 2 * 2 * 4 * 4) * 9)
4 + 7 * (9 * 2 + (3 * 7 + 8 + 9 + 5) + (7 + 4 * 8 + 7 + 7) + 3)
8 + 6 + 6 * 9
(7 * 2 * (8 * 3 * 6 + 5) + 4 * 6) * (3 + 2) * 4 + 5 * (8 * 8 + 6) + 9
(6 + 2) * (7 * 4 * 5 + 7 * 2 + (3 * 8 + 3)) + 2
(3 * 6 * (6 * 6 * 6 + 6 * 7 * 3)) + 4 + 8
4 * 8 + (5 + 9 * 8 + 8 * 4)
6 * (4 + 6 * (8 + 2) + 5) * 6 + 4 + 4 + 2
7 + (8 + 8 * 9 * 5 * 9 * 6) + 4 + 6 * 4 + 6
8 + ((4 * 7) + 3) * 3 + 3 + 6 * 7
3 * 3
(5 * 8 * 5 * 2 + 8 + 8) + 9 * 3 + ((2 + 2 * 3 + 6 * 2 * 5) * 6 * 4 + 3 * 6 * 8) + ((7 + 2) * 7 * (7 * 9) * 2 * 5) + 7
4 * 3
(4 + 6 + 8 + 8) * 6 + (9 * 6 * 2 * 8) + 4 * 4
7 + (5 + (8 + 2) + (4 + 5))
(8 * 6 * (3 * 9)) + 3 * 5 + 2 * 7 * 5
6 * (9 + 3 + 6 + 4 * 3 + 4) + 4 * (7 * 7) * 5
8 + ((7 + 2 + 2) + 2 + 7 * 4 * 3 + 6) + 9 * 2
(8 + 9 + 6 * (7 * 9 * 6 * 5 * 9) + 4 + 2) * (6 + 6 + 3 * 4) + 4 + 9
9 + (3 * 2 * 6 * 9 + 6) + 8 + 3 + 7 + 6
3 + (8 + (4 + 4 + 4 + 2) * 9 * (7 + 9 + 5) * 2) + 3
(2 * (3 * 3 + 5 + 5 * 4 + 4) * 7 * 3 * 7 * 6) + 2
3 + 6 * 4 * (5 * 9 * 3) * (6 * 2 * 4) * 2
2 + ((4 + 8 + 8 + 6) * 8 + 9 * 5 + 7 * 2) + 7 + 3
5 * 6 * (9 + 8) + (2 + 6 + 4 + 9) + 9 * (7 * 6 * 6 + 2 + 9)
5 + 4 * 7 * 9 + 3 + 4
7 + 9 * (4 + 7 + 7 + 3) * (2 + 7 * 4)
(2 + 7) * ((3 + 3 * 4 * 7 * 4) * 8 * 6 + 9 + 8 * 2) + ((7 * 4) * (9 * 5 * 5 + 9 * 9) * 3 * 7 + (7 + 4 * 4 * 9 * 5) * (5 + 2 + 3 + 8 + 3 + 4)) + 2 + 3 * 7
7 + 2 * (2 + 2 * 4 * 8 * (9 + 7 + 2 + 8) + (2 * 2 + 5 + 7 * 7)) * 7
7 + ((7 + 3 * 3 * 4) * 3 * 9)
9 + ((5 * 2 + 6) + 2 + (8 + 4 + 5 + 6) + 9) * 5
8 + 2 + (5 * 3 + 3) * 4
(8 * 7 * (2 * 3) + (7 * 8 + 3 + 5 + 2 * 3) + 4 + 9) + 4 + 2 + (5 + (4 + 4 * 6 * 6 + 5) + 8 * 6 + (8 * 4 * 9 * 4 + 4 * 4)) * 4
(9 + 5 * 3) + 7 + 9 + (3 * (7 + 4 * 2 + 9) + 4 * 7)
3 * 7 * (3 * (2 * 5 + 3) * 9) + 9 + ((9 * 3 * 7 + 9 + 3 * 6) * (2 + 3 + 9 + 8 + 9 * 5) * 2 + 5)
5 + (5 * 9 + (2 * 3 + 7 * 3 * 7) + 8 + 8)
7 + (4 + (8 + 3 * 4) + 3 + 9 + 8) * 4 + 2 + 3 * ((2 + 5 + 4 * 9 + 9) + (3 + 3 * 8 * 7))
3 * 6 + 2 * 4 * ((4 * 4) * 3 * 4 + 3) + 5
8 + 6 + 7 + (5 * 9 * 9 * 4 + 5) + (4 + 8) * (9 * 7)
9 + 3 * 3 + (2 + (7 * 5 * 9 * 2 * 8) * 3 * 2 + 8 + 4) * 7 * ((9 + 4 * 6) * 7)
(8 * 9 + 5 * (4 + 7) * 4) + 7 + 9 * (4 + 5 + 8) * 4 * (9 * (8 * 9 + 3 * 3) + 8 * 7 + 3)
(8 + (2 + 8 * 3 * 3 * 3 + 5) * 7 + (7 + 6 * 8 * 9 * 6) + 5) + 5 + 8 + 4 + (4 * 2 * 2 + 2 + 2 * 4)
(6 * 7 + (2 * 4) * 9) + 4 * (7 + 7 * 6) * 3
(9 + 6) * 6 + 3
6 + 2 * 7 * (9 + 7 + 6) * ((9 * 4 + 2) * 7 * 4 * 7 * (9 * 5 * 7) + 2)
4 + (4 + 8 * (8 + 9 + 5 * 7 * 6 + 8) * 3 + 8 * 2) + ((4 * 9 * 8 * 4 + 2) + (6 * 2 + 8 + 3 * 9 * 5) + 9 + 4)
6 * 5 * (2 * 4 + 3 * 6 * (5 + 9 * 4) * 4) + 4 + 4 + 8
((5 * 3 + 2 + 3 * 9) + 8 + 4 * 8) * ((9 + 3 + 7 + 5 * 4 * 4) * 5 * 7 + 9) + 7 * (3 + 5 + 4 + (2 * 5)) * (4 + 6 * 2)
5 * 4 + 2 + (5 * 9 * 8 * 8 + 2 + (8 + 9 * 2 + 7 + 8 * 3))
(6 * 5 + 9 + (9 * 8 * 9 * 6 * 4) + 2 + (5 * 6)) + (4 + 9 + 6) + 6 + 9
8 * 6 + (9 * 8)
6 * 9 + 6 * (5 * 7 + 7 + 4) + 9 * 9
7 * 3 * 9 * 8 * (7 * 2 + 9) + (4 + 8)
((7 + 2) + 5) + 8 * 6
8 + (9 * 7 + 5) + (7 + 9) + (5 * 3) * 8
8 * 7 + 6 + 8 * 7 * (6 * (9 * 6 + 8 + 5 * 7) * 9)
(3 * 5) + 3 * (6 + (2 * 3) * 5 * 2 * 3 + 5) * 7 + 5 + 4
(9 * 8) + (6 + 9) + 4 + 6
7 * (9 + 9 + 9 * 5) + 6 * ((3 + 6 + 6) + 8 * 9 * 5) + 3
6 + 7 * 8 * ((5 + 6 + 2 * 6 + 9) + 6 + 2 + 5) * 9
(5 * (8 + 9 + 9 * 3) * 9 * 3) + (5 * 8 + 8) * 3 * 5 + 7
5 + (8 + 6 * 2) * 8 + (8 + 2 + 9 + 7 * 2 + (4 * 4 * 9 * 9 + 4))
4 * (9 + (2 + 4 + 2 * 8 * 6 * 2) + 4 * 3)
6 + ((4 * 2) * 9 * (5 + 9 * 2 + 6 * 3 * 3) + 2 + 9 + (4 * 9 + 8 + 5 + 6 * 2)) * (7 * 9 * 7 * 7 * 2 + 4) * 8
5 + (6 + (9 + 9) * (9 + 4 * 9) + 6) + 4
9 + (7 + (9 * 8 + 9 + 5 * 4) * 3) + 8 + 8
9 * 3 * 4 * 9 * 3 + ((2 * 4) * (7 * 3) + (6 + 7 * 3 + 4 * 5 + 2) + 3)
(4 + 8) + 5 * 8 * (6 + 2 + 9 * 2)
5 * 2 * 4 + (6 * 2)
(6 + 3 + 7) * 6 * 9
6 + (8 + 8 + 8) * (7 * 6 * 9) * 9 * (2 + 6 + 3 * 4 * 6) + 4
(6 * 4 * 7 + (3 * 4) * 8 * 8) * 8 + 8 * 6 + 8
9 + 6 * 7 * 8
(5 * 7 * (7 + 8 * 9 + 5) * 6) + 5
7 * 4 + ((6 + 9 + 6 + 6) + 6 + 2 + 5 + 6) * 4 * (3 + (2 + 2 * 9 * 2 * 5) * 9 + 4 + 3) * (7 * (6 * 3) + (3 + 6 * 5 + 8))
6 + 3 * 5 + 9 * (5 + 5 * 5 * 9 + (8 * 6 + 8) * 4)
5 * 5 + 9 * 9 * 6 + (9 + (9 * 2 * 2))'''

# COMMAND ----------

import re

class minus_is_multiply:
  def __init__(self, val):
    self.val = val

  def __sub__(self, other):
    return minus_is_multiply(self.val * other.val)

  def __add__(self, other):
    return minus_is_multiply(self.val + other.val)


def parse(expression):
  return eval(re.sub(r'(\d+)', r'minus_is_multiply(\1)', expression)).val

  
expressions = inp.replace('*', '-').splitlines()

answer = sum(parse(expression) for expression in expressions)
print(answer)

# COMMAND ----------

# def parse(expression):
#   stack = []

#   while expression:
#     c = expression.pop(0)
#     if c == ')':
#       return stack.pop()
#     elif c == '(':
#       expression.insert(0, str(parse(expression)))
#     elif c.isdigit():
#       value = int(c)
#       if stack:
#         f = stack.pop()
#         value2 = stack.pop()
#         stack.append(f(value2, value))
#       else:
#         stack.append(value)
#     elif c == '+':
#       stack.append(lambda a, b: a + b)
#     elif c == '*':
#       stack.append(lambda a, b: a * b)

#   return stack.pop()


# expressions = [list(line) for line in inp.replace(' ', '').splitlines()]
# answer = sum(parse(expression) for expression in expressions)
# print(answer)

# COMMAND ----------

# MAGIC %md <article class="day-desc"><h2 id="part2">--- Part Two ---</h2><p>You manage to answer the child's questions and they finish part 1 of their homework, but get stuck when they reach the next section: <em>advanced</em> math.</p>
# MAGIC <p>Now, addition and multiplication have <em>different</em> precedence levels, but they're not the ones you're familiar with. Instead, addition is evaluated <em>before</em> multiplication.</p>
# MAGIC <p>For example, the steps to evaluate the expression <code>1 + 2 * 3 + 4 * 5 + 6</code> are now as follows:</p>
# MAGIC <pre><code><em>1 + 2</em> * 3 + 4 * 5 + 6
# MAGIC   3   * <em>3 + 4</em> * 5 + 6
# MAGIC   3   *   7   * <em>5 + 6</em>
# MAGIC   <em>3   *   7</em>   *  11
# MAGIC      <em>21       *  11</em>
# MAGIC          <em>231</em>
# MAGIC </code></pre>
# MAGIC <p>Here are the other examples from above:</p>
# MAGIC <ul>
# MAGIC <li><code>1 + (2 * 3) + (4 * (5 + 6))</code> still becomes <em><code>51</code></em>.</li>
# MAGIC <li><code>2 * 3 + (4 * 5)</code> becomes <em><code>46</code></em>.</li>
# MAGIC <li><code>5 + (8 * 3 + 9 + 3 * 4 * 3)</code> becomes <em><code>1445</code></em>.</li>
# MAGIC <li><code>5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))</code> becomes <em><code>669060</code></em>.</li>
# MAGIC <li><code>((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2</code> becomes <em><code>23340</code></em>.</li>
# MAGIC </ul>
# MAGIC <p><em>What do you get if you add up the results of evaluating the homework problems using these new rules?</em></p>
# MAGIC </article>

# COMMAND ----------

class sub_to_mul_mul_to_add:
  def __init__(self, val):
    self.val = val

  def __sub__(self, other):
    return sub_to_mul_mul_to_add(self.val * other.val)

  def __mul__(self, other):
    return sub_to_mul_mul_to_add(self.val + other.val)


def parse(expression):
  return eval(re.sub(r'(\d+)', r'sub_to_mul_mul_to_add(\1)', expression)).val

  
expressions = inp.replace('*', '-').replace('+', '*').splitlines()

answer = sum(parse(expression) for expression in expressions)
print(answer)
