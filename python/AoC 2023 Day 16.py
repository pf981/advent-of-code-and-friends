# Databricks notebook source
# %pip install z3-solver

# COMMAND ----------

inp = r'''.|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....
'''

# COMMAND ----------

inp = r'''\....\..-...........|..\........|.........|./.\..............\................/.....-............./...........
......-........../.........--........................|..-../.............................-\.....|.............
....-.-........................................................../..........................|...|......\|.....
....\.-......\|...............................-|........\.............................../......\..............
..|.|.|...-..-...-..................--........../.......................|.\-.../....................-....\....
....\...................|..............|..../../.......................\......................................
...............\.|..............\........\.\.-...--..-...\........................|.|.........................
..........-........\............-....|...|.............\.\...............\./............./....................
...\.....\.\...............||...........................................-...............-...../...|...........
......./......./....-..../...-........./././\..||.......-.|.......\.........\|................./........-.....
......................|./...|......................./...|....\................-....|....|.\...|.../......../..
.\...........\-......\.\|..\\..-|//../............/...............................-........|..|............-..
..|.............../.............|..-./..\....-|...........................-.|......|....\\......-..../...\....
............\......\|.../...............-......./.........\.\.\.../.|.........................................
....\-......./-........../....................|.........-......../........-.............\..|...../...-........
|.................|....................-.............|...........-.-....-...-......-................./|.\.....
|................/......./.........|.........................-/...........|.................\-/|.........\../.
...................-..............\................|..../.||.-....\...............-......................\..\.
.......|......\..-....-...............\.....|../..\..-...........|......../....\.././..........\.|........-..\
..\..|............|....\......../............-.\.................................-............-............\..
.........|.....\...........................................|....|............../..-.............../...........
...........-................................\...../....|.....|..............|.................................
./........................\..\...........................|.|................................-.................
......|\./....................|..../.........\......|.\..-.|.....|........./........|.........-.-.............
.........\.....................-.................\.....|...................../........./..............|.......
.................-.........\........\.....-...................\.....-..\........../........................./|
............|...........-....\..\............-....-........................|...|........../.............\.....
........................................../............/..................\............\..../......\../.......
......../..........-.....-...................../......................-......\..../..\.-...../....|.|....-....
\.........\.......-.................\.......\-......|.......\......................\......................-...
.........../.................|....................................|...\..../.../|.............................
..\.......................\...........-..\...../.................\.\..-................-...........|..........
...../.../............................\............................../.-../........\.-...|....................
...|....\.\...\...........-............\.............|............\.........................../........./.....
........../......../................/.../........................|............-......................\......./
.../............................-.....-...|.......\....................|...............\......................
......|..-|\..\............../.\.............-....-.......\................./.././/......../.....|....../|....
.............\.........\.......\........-...........||.......|...-.............\........./................/.|.
...\...../.-.....................-..........................-..-............../...../......|..|......|......\.
...|................|.............................|........./....\.....\...................................\..
..............-......................../........\.......................|.\/................-.........\.......
.\........\..\.....-.......\.-.-......................\..-........../................../..................--..
........|.....-.......|.../../..........|........\..|...../..\....../..|...............\|.....................
..........|...../........|....../..........-..-................../....-..........|............................
|...............-......../......./..................\.............\..........|.......\............||..........
........|.........|...............|.........../|..-\..........|....|...\..|\.\...............|-..-............
/......./.............-.....-.......\......-./.......\..\............|...\..\...../...............-.\.........
.-.........|....../.............|........|.......|.....-..............-....../............|............-/\....
..-...|........-...............-........\......../.-........................-................../-.......|.....
...\.-.....................-............................\...................||.....-..........\......\..../...
..........\./........\.||\...|..........-...../.......\.///......../...|...................../....--..........
.....\........./../.............-|...-..---.................../....|...\.../.....|./..........|...../.........
/..........-...../........-.................../..................\./.|..............-...-...............|.....
............\.............\..................................\|....|.../.....|..........\..................|..
...........\........./......\.................................../...-.....\.............\..|...........-......
.............\..-......................\.......|.../...............\.....-...|...|............................
................|-...................../|...|......................................\.............|.......|....
..|........./.................../...................../.....|.-...\............-.............................\
|.\........\.-..........|..|.........|\.-|\\.-....-...............................|....|...........-..|.....-.
./................|.|..|......\.....................-..........\........-...................../......|........
........../.........../............../...||..-.........|....\.\.......|..../.......|............./.-......./..
.........\.\.......-................/.../....|...................\.\|./...../........\.....................|..
..............|........-................|..............|.....-.-................\.........|......./......-....
.........................../.-.-...........................-................-.....-.............|.........\.\.
....|....|.../..........................|............................-...........--....../..|.............\\|.
......./...../..............-...............\|............/-..............................-/.....-.\..........
....-........-....\\.....|../.....-......../.............|.............|...../.......\\....../.........|......
......................-.../.................................................................-..../........|.-/
.................|...........-..|.-.......|............/................./......-.....................-.|.....
|...|.........\.|\..\....../..........-......\\......\.....................\/../.........../..../..-...|.|....
.|.|....|.....|\............./.|......-......-............/....-...-......../-|...............................
....../..............\............../....\..............\............|..\.........|....................|......
.........................\|.......-..........................................................\|...............
...............\.........|../.....-......\..................-.........................-..............-......|.
.....|...|.-...........................\..........\......\../.................-...............-........\......
.|........../........../..............|..../...../...|........-......../.\..........\......................-..
.............-|..................../.......-.../......-.../......./......|..........-./.......................
...\.........|.|...................|../.|...........|....................///....-.........-......./.......|...
.\........-.\..................................-\../...../..\......\...................../|.......-...........
........\..................\.......|...|................../\............|........-............\||.../..-../...
.............\..|/...................../....|.|...//....../|............\..\..|.......-..............-........
.........|/..................-............/....../............/....||.........................................
.|............-........|.........-//..........-................../........../..-...............|..|.......\...
........|.../......-..|.\..|..................|./....|.....-................................/.........../.....
..............-..........|......../.................................../.....\.............../.../..\..|/......
--................\...............|.........-.....|...../.........................-.....-.\\..........\.......
.......\.........\.................-..................../......\.....................\.................-......
....|....|......|...\.........\......../............/..../....\.......\...\....\.........|...................|
..........|....\\.............|........./.....|............../...-/...-.||......./......\.....................
..-./..-./.|...............-/.-.............|...............................\.....-...........................
/......|..|\........\........../...................-.\.......-...............-..\.......|.......|..-..........
./..\................................/.-..................-................-......../.......-.....|...........
............|..|.....\............\.\............\......|.-....../........\..|............../...........|.....
...|....|............|......../....|.|............./......................................|....../.|..-.......
............\......\........-.../....................-./....-.../.\....|........|......-...\........../.......
...........................-................./.......\...........................-.......\....................
.-.-.......|.......|.......-..................................../......-\......./..\.-.............-..........
.............../............-...................|..........................\.-..............\.................
..................................../|..............................|.../....\............/|.........\......./
.\...../\.-.........../....-.-|................./.../..../..........|..................................|.....-
..|......................\..................-...........\....-........\......-...-..-........................|
..-.......-......................\....-...........................|.......-../-...-......................|....
.............-..........................|..................................\./.........................-...../
....\......|........................|..................../........................|.|\.......\......../......\
.../........./..................\..../.../\............|.......|...\.\...../...\.....-...........|..|.\.......
....\../..................\...|.........|../..../.......................|..........-...|....\../............./
../......-......\.......\...........\|.......|...-./..........|................|../|......./..................
........../\/............................-.....|...-..|...............|.........................-.\...........
......................|..........\..................../..-........-...../.........-........./.........../.....
/.........-...................\.-\..............\...\....\.......\...|....................../.........|.......
'''

# COMMAND ----------

m = {(row, col): c for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line)}

seen = set() # pos, direction
stack = [((0, 0), '>')]
while stack:
    pos, direction = stack.pop()
    #print(pos, direction, m[pos])

    if pos not in m:
        continue

    if (pos, direction) in seen:
        continue
    seen.add((pos, direction))


    if m[pos] == '.' or (m[pos] == '|' and direction == 'v^') or (m[pos] == '-' and direction == '<>'):
        stack.append(((pos[0] + (direction == 'v') - (direction == '^'), pos[1] + (direction == '>') - (direction == '<')), direction))
        continue

    if m[pos] == '|':
        #print('!')
        stack.append(((pos[0] - 1, pos[1]), '^'))
        stack.append(((pos[0] + 1, pos[1]), 'v'))
        continue
    
    if m[pos] == '-':
        stack.append(((pos[0], pos[1] - 1), '<'))
        stack.append(((pos[0], pos[1] + 1), '>'))
        continue

    if m[pos] == '/':
        if direction == '>':
            stack.append(((pos[0] - 1, pos[1]), '^'))
        elif direction == '<':
            stack.append(((pos[0] + 1, pos[1]), 'v'))
        elif direction == '^':
            stack.append(((pos[0], pos[1] + 1), '>'))
        elif direction == 'v':
            stack.append(((pos[0], pos[1] - 1), '<'))
        continue

    if m[pos] == '\\':
        if direction == '>':
            stack.append(((pos[0] + 1, pos[1]), 'v'))
        elif direction == '<':
            stack.append(((pos[0] - 1, pos[1]), '^'))
        elif direction == '^':
            stack.append(((pos[0], pos[1] - 1), '<'))
        elif direction == 'v':
            stack.append(((pos[0], pos[1] + 1), '>'))
        continue

# COMMAND ----------

len({pos for pos, _ in seen}.union({pos for pos, c in m.items() if c != '.'}))

# COMMAND ----------

len({pos for pos, _ in seen}) # 8060 not right
# It's 8112

# COMMAND ----------

def count_energized(start_pos, start_dir):
    m = {(row, col): c for row, line in enumerate(inp.splitlines()) for col, c in enumerate(line)}

    seen = set() # pos, direction
    stack = [(start_pos, start_dir)]
    while stack:
        pos, direction = stack.pop()
        #print(pos, direction, m[pos])

        if pos not in m:
            continue

        if (pos, direction) in seen:
            continue
        seen.add((pos, direction))


        if m[pos] == '.' or (m[pos] == '|' and direction == 'v^') or (m[pos] == '-' and direction == '<>'):
            stack.append(((pos[0] + (direction == 'v') - (direction == '^'), pos[1] + (direction == '>') - (direction == '<')), direction))
            continue

        if m[pos] == '|':
            #print('!')
            stack.append(((pos[0] - 1, pos[1]), '^'))
            stack.append(((pos[0] + 1, pos[1]), 'v'))
            continue
        
        if m[pos] == '-':
            stack.append(((pos[0], pos[1] - 1), '<'))
            stack.append(((pos[0], pos[1] + 1), '>'))
            continue

        if m[pos] == '/':
            if direction == '>':
                stack.append(((pos[0] - 1, pos[1]), '^'))
            elif direction == '<':
                stack.append(((pos[0] + 1, pos[1]), 'v'))
            elif direction == '^':
                stack.append(((pos[0], pos[1] + 1), '>'))
            elif direction == 'v':
                stack.append(((pos[0], pos[1] - 1), '<'))
            continue

        if m[pos] == '\\':
            if direction == '>':
                stack.append(((pos[0] + 1, pos[1]), 'v'))
            elif direction == '<':
                stack.append(((pos[0] - 1, pos[1]), '^'))
            elif direction == '^':
                stack.append(((pos[0], pos[1] - 1), '<'))
            elif direction == 'v':
                stack.append(((pos[0], pos[1] + 1), '>'))
            continue
    return len({pos for pos, _ in seen}) 

best = 0
n_rows = (len(inp.splitlines()))
n_cols = (len(inp.splitlines()[0]))
for col in range(n_cols):
    best = max(count_energized((0, col), 'v'), best)
    best = max(count_energized((n_rows-1, col), '^'), best)
    
for row in range(n_rows):
    best = max(count_energized((row, 0), '>'), best)
    best = max(count_energized((row, n_cols - 1), '^'), best)
best

# COMMAND ----------

for row in range(len(inp.splitlines())):
    line = ''
    for col in range(len(inp.splitlines()[0])):
        c = m[(row, col)]
        for pos, direction in seen:
            if pos == (row, col):
                c = direction
        line += c
    print(line)

# COMMAND ----------

inp

# COMMAND ----------

inp.splitlines()

# COMMAND ----------

seen

# COMMAND ----------


